{"meta":{"title":"Pioneer","subtitle":null,"description":"Stay hungry，stay foolish.","author":"Peng-YM","url":"http://peng-ym.github.io"},"pages":[{"title":"categories","date":"2018-06-20T14:16:54.297Z","updated":"2018-06-20T14:16:54.296Z","comments":true,"path":"categories/index.html","permalink":"http://peng-ym.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2017-12-14T15:47:30.000Z","updated":"2017-12-14T15:47:30.075Z","comments":true,"path":"about/index.html","permalink":"http://peng-ym.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-06-20T14:16:27.352Z","updated":"2018-06-20T14:16:27.352Z","comments":true,"path":"tags/index.html","permalink":"http://peng-ym.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java Reflection Tutorial","slug":"Java-Reflection-Tutorial","date":"2018-06-01T08:23:18.000Z","updated":"2018-06-01T08:38:06.659Z","comments":true,"path":"2018/06/01/Java-Reflection-Tutorial/","link":"","permalink":"http://peng-ym.github.io/2018/06/01/Java-Reflection-Tutorial/","excerpt":"Define Data Class1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import java.util.HashMap;import java.util.List;public class Person &#123; public String country; public String city; private String name; private int age; private final String finalValue; private final String inlineFinalValue = \"inline-final\"; private static String staticValue = \"static\"; public Person()&#123; finalValue = \"final\"; System.out.println(\"Executed no args constructor\"); &#125; private Person(String country, String city, String name)&#123; finalValue = \"final\"; this.country = country; this.city = city; this.name = name; System.out.println(\"Executed private constructor!\"); &#125; private String getMobile(int dummy)&#123; System.out.println(\"getMobile() method invoked!\"); System.out.println(\"The argument is \" + dummy); return \"123456\"; &#125; public static String getStaticValue()&#123; return staticValue; &#125; public void genericTypeTest(HashMap&lt;String, Person&gt; map, List&lt;String&gt; list)&#123; &#125; public void setAge(int age)&#123; if (age &lt; 0 || age &gt; 100)&#123; System.out.println(\"Invalid Age!\"); &#125;else&#123; this.age = age; &#125; &#125; public int getAge()&#123; return age; &#125; @Override public String toString() &#123; return String.format(\"Person: [Country: %s, City: %s, Name: %s, Age: %d, Final: %s, static: %s, Inline-final: %s]\", country, city, name, age, finalValue, staticValue, inlineFinalValue); &#125;&#125;","text":"Define Data Class1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import java.util.HashMap;import java.util.List;public class Person &#123; public String country; public String city; private String name; private int age; private final String finalValue; private final String inlineFinalValue = \"inline-final\"; private static String staticValue = \"static\"; public Person()&#123; finalValue = \"final\"; System.out.println(\"Executed no args constructor\"); &#125; private Person(String country, String city, String name)&#123; finalValue = \"final\"; this.country = country; this.city = city; this.name = name; System.out.println(\"Executed private constructor!\"); &#125; private String getMobile(int dummy)&#123; System.out.println(\"getMobile() method invoked!\"); System.out.println(\"The argument is \" + dummy); return \"123456\"; &#125; public static String getStaticValue()&#123; return staticValue; &#125; public void genericTypeTest(HashMap&lt;String, Person&gt; map, List&lt;String&gt; list)&#123; &#125; public void setAge(int age)&#123; if (age &lt; 0 || age &gt; 100)&#123; System.out.println(\"Invalid Age!\"); &#125;else&#123; this.age = age; &#125; &#125; public int getAge()&#123; return age; &#125; @Override public String toString() &#123; return String.format(\"Person: [Country: %s, City: %s, Name: %s, Age: %d, Final: %s, static: %s, Inline-final: %s]\", country, city, name, age, finalValue, staticValue, inlineFinalValue); &#125;&#125; Test Class123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125import java.lang.reflect.*;import java.util.Arrays;import java.util.Collection;import java.util.HashMap;import java.util.List;public class Main &#123; public static void main(String[] args)&#123; try &#123; Class&lt;?&gt; clazz = Class.forName(\"Person\"); // Get public constructors Constructor[] constructors = clazz.getConstructors(); System.out.println(\"\\nPublic constructors\\n\"); printIterable(Arrays.asList(constructors)); Constructor constructor = clazz.getConstructor(); Person person = (Person) constructor.newInstance(); System.out.println(person); // Get all constructors Constructor[] allConstructors = clazz.getDeclaredConstructors(); System.out.println(\"\\nAll constructors:\\n\"); printIterable(Arrays.asList(allConstructors)); Constructor constructor1 = clazz.getDeclaredConstructor(String.class, String.class, String.class); constructor1.setAccessible(true); person = (Person) constructor1.newInstance(\"China\", \"GuangDong\", \"Peng-YM\"); System.out.println(constructor1.getModifiers()); System.out.println(person); // Get public fields System.out.println(\"\\nPublic fields\\n\"); Field[] fields = clazz.getFields(); printIterable(Arrays.asList(fields)); // Get all fields System.out.println(\"\\nAll fields\\n\"); Field[] allFields = clazz.getDeclaredFields(); printIterable(Arrays.asList(allFields)); // Get specific field Field age = clazz.getDeclaredField(\"age\"); age.setAccessible(true); // Cannot modify it to an invalid value with public method person.setAge(-1); System.out.println(person); // But we can modify it with reflection age.setInt(person, -1); System.out.println(person); // Get final field Field finalField = clazz.getDeclaredField(\"finalValue\"); finalField.setAccessible(true); // Cannot modify final value by this finalField.set(person, \"modified-final\"); System.out.println(person); // You should first remove the final modifier then you can modify it Field modifierField = Field.class.getDeclaredField(\"modifiers\"); modifierField.setAccessible(true); modifierField.setInt(finalField, finalField.getModifiers() &amp; ~Modifier.FINAL); finalField.set(person, \"modified-final\"); System.out.println(person); // With this technique, we can even modify a private field to public modifierField.setInt(finalField, Modifier.PUBLIC); // But still cannot do this since reflection happens in running time // System.out.println(\"Now public: \" + person.finalValue); // However, inline final value is compile-time constant hence cannot be modified Field inlineFinal = clazz.getDeclaredField(\"inlineFinalValue\"); inlineFinal.setAccessible(true); modifierField.setInt(inlineFinal, inlineFinal.getModifiers() &amp; ~Modifier.FINAL); inlineFinal.set(person, \"modified-inline-final\"); System.out.println(person); // nothing happens // Modify static value Field staticField = clazz.getDeclaredField(\"staticValue\"); staticField.setAccessible(true); staticField.set(person, \"modified-static\"); System.out.println(person); // Get public methods System.out.println(\"\\nPublic methods\\n\"); Method[] methods = clazz.getMethods(); printIterable(Arrays.asList(methods)); // Get all methods System.out.println(\"\\nAll Methods\\n\"); Method[] allMethods = clazz.getMethods(); printIterable(Arrays.asList(allMethods)); // Execute method Method getMobile = clazz.getDeclaredMethod(\"getMobile\", int.class); getMobile.setAccessible(true); getMobile.invoke(person, 123); // Execute class method Method classMethod = clazz.getDeclaredMethod(\"getStaticValue\"); System.out.println(\"\\nThe static value is: \" + classMethod.invoke(person)); // Get generic type Method genericMethod = clazz.getDeclaredMethod(\"genericTypeTest\", HashMap.class, List.class); Type[] genericParameterTypes = genericMethod.getGenericParameterTypes(); System.out.println(\"\\nGeneric Types\"); printIterable(Arrays.asList(genericParameterTypes)); ParameterizedType parameterizedType = (ParameterizedType) genericParameterTypes[0]; System.out.println(\"\\nRaw Type: \" + parameterizedType.getRawType()); Type[] actualTypes = parameterizedType.getActualTypeArguments(); System.out.println(\"\\nActual Types:\\n\"); printIterable(Arrays.asList(actualTypes)); &#125; catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException | NoSuchFieldException e) &#123; e.printStackTrace(); &#125; &#125; private static void printIterable(Collection&lt;?&gt; iterable)&#123; for (Object i: iterable)&#123; System.out.println(i); &#125; &#125;&#125;","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://peng-ym.github.io/tags/Java/"}]},{"title":"REST API Design Guides","slug":"REST API Design","date":"2018-04-10T03:12:48.000Z","updated":"2018-04-10T03:20:59.647Z","comments":true,"path":"2018/04/10/REST API Design/","link":"","permalink":"http://peng-ym.github.io/2018/04/10/REST API Design/","excerpt":"Conventions1. Use nouns but no verbs Resource GET (read) POST (create) PATCH (update) DELETE /cars Return a list of cars Create a new car Bulk update of cars Delete all cars /cars/1 Return car id = 1 Method not allowed (405) Update car id = 1 Delete car id = 1 Do not use verbs: Bad Examples! 123/getAllCars/createNewCar/deleteAllCar","text":"Conventions1. Use nouns but no verbs Resource GET (read) POST (create) PATCH (update) DELETE /cars Return a list of cars Create a new car Bulk update of cars Delete all cars /cars/1 Return car id = 1 Method not allowed (405) Update car id = 1 Delete car id = 1 Do not use verbs: Bad Examples! 123/getAllCars/createNewCar/deleteAllCar 2. Use plural nouns12/cars YES/car NO!!!! 3. Use sub-resources for relations GET /cars/711/drivers/ Returns a list of drivers for car 711. GET /cars/711/drivers/4 Returns driver #4 for car 711. 4. Provide filtering, sorting and paging for collectionsFiltering: GET /cars?color=red Returns a list of red cars. GET /cars?seats&lt;=2 Returns a list of cars with a maximum of 2 seats Sorting: Allow ascending and descending sorting over multiple fields. 1GET /cars?sort=-manufactorer,+model Returns a list of cars sorted by descending manufacturers and ascending models. Paging: Do not allow user to retrieve all the data in one request by default. Instead, GET operations, which return a list of requested items, return only the first 25(or another value) items. URL Description /cars Return the first 25 cars /cars?limit=10 Return the first 10 cars /cars?offset=5 Return cars from No.6 to No. 31 /cars?offset=10&amp;limit=5 Return cars from No.6 to No. 10 To page through all available items, use the metadata section of the JSON response to get total number of items. For example, &quot;total&quot;: 77 means there are 77 cars in the database. 1234567891011121314151617181920&#123; \"meta\": &#123; \"result_set\": &#123; \"count\": 2, \"offset\": 0, \"limit\": 2, \"total\": 77 &#125; &#125;, \"data\": [ &#123; \"id\": \"uuid1\", \"model\": \"Benz\" &#125;, &#123; \"id\": \"uuid2\", \"model\": \"Lamborghini\" &#125; ]&#125; Note: Send GET request to /cars?limit=0 to get a json that just contains metadata. 5. Versioning the APIMake the API Version mandatory and do not release an unversioned API. Use a simple ordinal number. 1/api/v1 6. Handle Errors with HTTP status codesUseful status codes 200 – OK – Eyerything is working 201 – OK – New resource has been created 204 – OK – The resource was successfully deleted 304 – Not Modified – The client can use cached data 401 – Unauthorized – The request requires an user authentication 403 – Forbidden – The server understood the request, but is refusing it or the access is not allowed. 404 – Not found – There is no resource behind the URI. 500 – Internal Server Error – You should avoid this error. If an error occurs in the global catch blog, the stracktrace should be logged and not returned as response. 400 – Bad Request – The request was invalid or cannot be served. The exact error should be explained in the error payload. Error payloads All exceptions should be mapped in an error payload. Here is an example how a JSON payload should look like. 1234567&#123; \"errors\": [&#123; \"title\": \"This is a short human readable msg, MUST not be empty\", \"detail\": \"This is human readable detail msg, can be empty\", \"status\": 404 &#125;]&#125; JSON SpecificationsSpecifications","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://peng-ym.github.io/tags/Android/"}]},{"title":"在Mac上使用tree命令浏览文件树结构(转)","slug":"在Mac上使用tree命令浏览文件树结构-转","date":"2017-12-17T05:27:57.000Z","updated":"2017-12-17T10:34:29.537Z","comments":true,"path":"2017/12/17/在Mac上使用tree命令浏览文件树结构-转/","link":"","permalink":"http://peng-ym.github.io/2017/12/17/在Mac上使用tree命令浏览文件树结构-转/","excerpt":"","text":"使用alias命令 编辑.bashrc或者.zshrc，在文件中添加一行： 12$ vim .zshrcalias tree=\"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'\" 应用更改 1$ source .zshrc 在文件夹下使用tree命令就可以看到当前文件夹的层级结构了 效果图 安装tree包如果想要更多功能，可以直接使用unix的tree包。1$ brew install tree 原文地址","categories":[],"tags":[{"name":"折腾工具","slug":"折腾工具","permalink":"http://peng-ym.github.io/tags/折腾工具/"}]},{"title":"利用Python IMAP、SMTP进行邮件收发","slug":"利用Python-IMAP、SMTP进行邮件收发","date":"2017-12-14T16:54:47.000Z","updated":"2017-12-14T16:54:47.676Z","comments":true,"path":"2017/12/15/利用Python-IMAP、SMTP进行邮件收发/","link":"","permalink":"http://peng-ym.github.io/2017/12/15/利用Python-IMAP、SMTP进行邮件收发/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Apache Htpd端口转发配置","slug":"Centos Apache-Htpd端口转发配置","date":"2017-12-14T16:53:26.000Z","updated":"2017-12-14T17:17:25.783Z","comments":true,"path":"2017/12/15/Centos Apache-Htpd端口转发配置/","link":"","permalink":"http://peng-ym.github.io/2017/12/15/Centos Apache-Htpd端口转发配置/","excerpt":"安装httpdCentos 安装httpd非常简单，yum安装即可1yum instal httpd 配置转发规则示例在部署Java Web应用时，通常会把应用部署在一个Web容器（如Tomcat），再部署一个HTTP服务器转发请求。 例如部署Tomcat监听8080端口，部署Apache Httpd监听80端口，再转发给tomcat的8080端口。 可以在一台服务器上部署多个应用和配置多个域名，对于访问者来说感觉像访问两个不同的网站一样。在示例中启动了两个Tomcat实例，分别监听8080和8081端口，部署两个不同的应用。然后将两个域名均指向这台机器的ip，Apache通过访问者使用的域名来执行不同的转发。","text":"安装httpdCentos 安装httpd非常简单，yum安装即可1yum instal httpd 配置转发规则示例在部署Java Web应用时，通常会把应用部署在一个Web容器（如Tomcat），再部署一个HTTP服务器转发请求。 例如部署Tomcat监听8080端口，部署Apache Httpd监听80端口，再转发给tomcat的8080端口。 可以在一台服务器上部署多个应用和配置多个域名，对于访问者来说感觉像访问两个不同的网站一样。在示例中启动了两个Tomcat实例，分别监听8080和8081端口，部署两个不同的应用。然后将两个域名均指向这台机器的ip，Apache通过访问者使用的域名来执行不同的转发。 httpd的配置文件位于/etc/httpd/conf/httpd.conf，在文件中添加以下配置：123456789101112131415NameVirtualHost *:80&lt;VirtualHost *:80&gt; ServerName www.example.com ServerAlias example.com *.example.com ProxyPass / http://localhost:8080/ ProxyPassReverse / http://localhost:8080/&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt; ServerName www.example2.com ServerAlias example2.com *.example2.com ProxyPass / http://localhost:8081/ ProxyPassReverse / http://localhost:8081/&lt;/VirtualHost&gt; 常见的问题 Centos下apache启动时httpd: apr_sockaddr_info_get() failed报错 解决办法：reference 123echo www.example.com &gt; /etc/hostname/bin/hostname -F /etc/hostname/etc/init.d/httpd restart","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://peng-ym.github.io/tags/服务器/"}]},{"title":"tmux使用指南","slug":"tmux使用指南","date":"2017-12-14T16:18:56.000Z","updated":"2018-04-08T13:23:04.309Z","comments":true,"path":"2017/12/15/tmux使用指南/","link":"","permalink":"http://peng-ym.github.io/2017/12/15/tmux使用指南/","excerpt":"介绍Tmux 简单来说就是终端里的『窗口管理器』，如果我使用终端登录到远程主机并运行前台程序，那么这个窗口等于就被占用了，想要看一下 CPU 的使用率，就得再连接一次。但是如果在远程主机上运行 tmux，那么就可以开启多个控制台（类似于窗口），相当高效。可以通过下面的视频看看大神操作：","text":"介绍Tmux 简单来说就是终端里的『窗口管理器』，如果我使用终端登录到远程主机并运行前台程序，那么这个窗口等于就被占用了，想要看一下 CPU 的使用率，就得再连接一次。但是如果在远程主机上运行 tmux，那么就可以开启多个控制台（类似于窗口），相当高效。可以通过下面的视频看看大神操作： 安装使用包管理工具安装即可。例如：1brew install tmux 基本操作 帮助信息 tmux list-keys 列出所有可以的快捷键和其运行的 tmux 命令 tmux list-commands 列出所有的 tmux 命令及其参数 tmux info 列出所有的 session, window, pane, 运行的进程号，等。 更常用的是在 tmux 中直接通过默认前缀 ctrl + b （因为ctrl + b不好按，下面我会将它更改为 ctr + a）之后输入对应命令来操作，具体如下（这里只列出输入默认前缀之后需要输入的操作）： 基本操作： ? 列出所有快捷键 : 进入命令模式 ctrl + z 挂起当前session 窗口操作 c 创建 &amp; 关闭 [0-9] 切换至指定窗口 p 上一窗口 n 下一窗口 w 窗口列表 配置文件系统范围的配置文件是 /etc/tmux.conf，而针对个人的配置文件在 ~/.tmux.conf。 通过配置文件，可以定义新的快捷键，定义窗口、窗格布局等。 推荐配置https://github.com/gpakosz/.tmux效果图如下： Demo","categories":[],"tags":[{"name":"折腾工具","slug":"折腾工具","permalink":"http://peng-ym.github.io/tags/折腾工具/"}]}]}