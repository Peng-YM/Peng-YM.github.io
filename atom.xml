<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pioneer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://peng-ym.github.io/"/>
  <updated>2018-06-01T08:38:06.659Z</updated>
  <id>http://peng-ym.github.io/</id>
  
  <author>
    <name>Peng-YM</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Reflection Tutorial</title>
    <link href="http://peng-ym.github.io/2018/06/01/Java-Reflection-Tutorial/"/>
    <id>http://peng-ym.github.io/2018/06/01/Java-Reflection-Tutorial/</id>
    <published>2018-06-01T08:23:18.000Z</published>
    <updated>2018-06-01T08:38:06.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Define-Data-Class"><a href="#Define-Data-Class" class="headerlink" title="Define Data Class"></a>Define Data Class</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String country;</span><br><span class="line">    <span class="keyword">public</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String finalValue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String inlineFinalValue = <span class="string">"inline-final"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String staticValue = <span class="string">"static"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        finalValue = <span class="string">"final"</span>;</span><br><span class="line">        System.out.println(<span class="string">"Executed no args constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String country, String city, String name)</span></span>&#123;</span><br><span class="line">        finalValue = <span class="string">"final"</span>;</span><br><span class="line">        <span class="keyword">this</span>.country = country;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">"Executed private constructor!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getMobile</span><span class="params">(<span class="keyword">int</span> dummy)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getMobile() method invoked!"</span>);</span><br><span class="line">        System.out.println(<span class="string">"The argument is "</span> + dummy);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"123456"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getStaticValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> staticValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">genericTypeTest</span><span class="params">(HashMap&lt;String, Person&gt; map, List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Invalid Age!"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"Person: [Country: %s, City: %s, Name: %s, Age: %d, Final: %s, static: %s, Inline-final: %s]"</span>,</span><br><span class="line">                country, city, name, age, finalValue, staticValue, inlineFinalValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Test-Class"><a href="#Test-Class" class="headerlink" title="Test Class"></a>Test Class</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(<span class="string">"Person"</span>);</span><br><span class="line">            <span class="comment">// Get public constructors</span></span><br><span class="line">            Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">            System.out.println(<span class="string">"\nPublic constructors\n"</span>);</span><br><span class="line">            printIterable(Arrays.asList(constructors));</span><br><span class="line">            Constructor constructor = clazz.getConstructor();</span><br><span class="line">            Person person = (Person) constructor.newInstance();</span><br><span class="line">            System.out.println(person);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get all constructors</span></span><br><span class="line">            Constructor[] allConstructors = clazz.getDeclaredConstructors();</span><br><span class="line">            System.out.println(<span class="string">"\nAll constructors:\n"</span>);</span><br><span class="line">            printIterable(Arrays.asList(allConstructors));</span><br><span class="line">            Constructor constructor1 = clazz.getDeclaredConstructor(String.class, String.class, String.class);</span><br><span class="line">            constructor1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            person = (Person) constructor1.newInstance(<span class="string">"China"</span>, <span class="string">"GuangDong"</span>, <span class="string">"Peng-YM"</span>);</span><br><span class="line">            System.out.println(constructor1.getModifiers());</span><br><span class="line">            System.out.println(person);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get public fields</span></span><br><span class="line">            System.out.println(<span class="string">"\nPublic fields\n"</span>);</span><br><span class="line">            Field[] fields = clazz.getFields();</span><br><span class="line">            printIterable(Arrays.asList(fields));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get all fields</span></span><br><span class="line">            System.out.println(<span class="string">"\nAll fields\n"</span>);</span><br><span class="line">            Field[] allFields = clazz.getDeclaredFields();</span><br><span class="line">            printIterable(Arrays.asList(allFields));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get specific field</span></span><br><span class="line">            Field age = clazz.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">            age.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Cannot modify it to an invalid value with public method</span></span><br><span class="line">            person.setAge(-<span class="number">1</span>);</span><br><span class="line">            System.out.println(person);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// But we can modify it with reflection</span></span><br><span class="line">            age.setInt(person, -<span class="number">1</span>);</span><br><span class="line">            System.out.println(person);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get final field</span></span><br><span class="line">            Field finalField = clazz.getDeclaredField(<span class="string">"finalValue"</span>);</span><br><span class="line">            finalField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Cannot modify final value by this</span></span><br><span class="line">            finalField.set(person, <span class="string">"modified-final"</span>);</span><br><span class="line">            System.out.println(person);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// You should first remove the final modifier then you can modify it</span></span><br><span class="line">            Field modifierField = Field.class.getDeclaredField(<span class="string">"modifiers"</span>);</span><br><span class="line">            modifierField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            modifierField.setInt(finalField, finalField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">            finalField.set(person, <span class="string">"modified-final"</span>);</span><br><span class="line">            System.out.println(person);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// With this technique, we can even modify a private field to public</span></span><br><span class="line">            modifierField.setInt(finalField, Modifier.PUBLIC);</span><br><span class="line">            <span class="comment">// But still cannot do this since reflection happens in running time</span></span><br><span class="line">            <span class="comment">// System.out.println("Now public: " + person.finalValue);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// However, inline final value is compile-time constant hence cannot be modified</span></span><br><span class="line">            Field inlineFinal = clazz.getDeclaredField(<span class="string">"inlineFinalValue"</span>);</span><br><span class="line">            inlineFinal.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            modifierField.setInt(inlineFinal, inlineFinal.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">            inlineFinal.set(person, <span class="string">"modified-inline-final"</span>);</span><br><span class="line">            System.out.println(person); <span class="comment">// nothing happens</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Modify static value</span></span><br><span class="line">            Field staticField = clazz.getDeclaredField(<span class="string">"staticValue"</span>);</span><br><span class="line">            staticField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            staticField.set(person, <span class="string">"modified-static"</span>);</span><br><span class="line">            System.out.println(person);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get public methods</span></span><br><span class="line">            System.out.println(<span class="string">"\nPublic methods\n"</span>);</span><br><span class="line">            Method[] methods = clazz.getMethods();</span><br><span class="line">            printIterable(Arrays.asList(methods));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get all methods</span></span><br><span class="line">            System.out.println(<span class="string">"\nAll Methods\n"</span>);</span><br><span class="line">            Method[] allMethods = clazz.getMethods();</span><br><span class="line">            printIterable(Arrays.asList(allMethods));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Execute method</span></span><br><span class="line">            Method getMobile = clazz.getDeclaredMethod(<span class="string">"getMobile"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">            getMobile.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            getMobile.invoke(person, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Execute class method</span></span><br><span class="line">            Method classMethod = clazz.getDeclaredMethod(<span class="string">"getStaticValue"</span>);</span><br><span class="line">            System.out.println(<span class="string">"\nThe static value is: "</span> + classMethod.invoke(person));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get generic type</span></span><br><span class="line">            Method genericMethod = clazz.getDeclaredMethod(<span class="string">"genericTypeTest"</span>, HashMap.class, List.class);</span><br><span class="line">            Type[] genericParameterTypes = genericMethod.getGenericParameterTypes();</span><br><span class="line">            System.out.println(<span class="string">"\nGeneric Types"</span>);</span><br><span class="line">            printIterable(Arrays.asList(genericParameterTypes));</span><br><span class="line">            ParameterizedType parameterizedType = (ParameterizedType) genericParameterTypes[<span class="number">0</span>];</span><br><span class="line">            System.out.println(<span class="string">"\nRaw Type: "</span> + parameterizedType.getRawType());</span><br><span class="line">            Type[] actualTypes = parameterizedType.getActualTypeArguments();</span><br><span class="line">            System.out.println(<span class="string">"\nActual Types:\n"</span>);</span><br><span class="line">            printIterable(Arrays.asList(actualTypes));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException | InstantiationException | NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printIterable</span><span class="params">(Collection&lt;?&gt; iterable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Object i: iterable)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Define-Data-Class&quot;&gt;&lt;a href=&quot;#Define-Data-Class&quot; class=&quot;headerlink&quot; title=&quot;Define Data Class&quot;&gt;&lt;/a&gt;Define Data Class&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String country;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String city;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String finalValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String inlineFinalValue = &lt;span class=&quot;string&quot;&gt;&quot;inline-final&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String staticValue = &lt;span class=&quot;string&quot;&gt;&quot;static&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        finalValue = &lt;span class=&quot;string&quot;&gt;&quot;final&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Executed no args constructor&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String country, String city, String name)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        finalValue = &lt;span class=&quot;string&quot;&gt;&quot;final&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.country = country;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.city = city;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Executed private constructor!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getMobile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dummy)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;getMobile() method invoked!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;The argument is &quot;&lt;/span&gt; + dummy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;123456&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getStaticValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; staticValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;genericTypeTest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HashMap&amp;lt;String, Person&amp;gt; map, List&amp;lt;String&amp;gt; list)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (age &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || age &amp;gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Invalid Age!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; String.format(&lt;span class=&quot;string&quot;&gt;&quot;Person: [Country: %s, City: %s, Name: %s, Age: %d, Final: %s, static: %s, Inline-final: %s]&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                country, city, name, age, finalValue, staticValue, inlineFinalValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://peng-ym.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>REST API Design Guides</title>
    <link href="http://peng-ym.github.io/2018/04/10/REST%20API%20Design/"/>
    <id>http://peng-ym.github.io/2018/04/10/REST API Design/</id>
    <published>2018-04-10T03:12:48.000Z</published>
    <updated>2018-04-10T03:20:59.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Conventions"><a href="#Conventions" class="headerlink" title="Conventions"></a>Conventions</h2><h3 id="1-Use-nouns-but-no-verbs"><a href="#1-Use-nouns-but-no-verbs" class="headerlink" title="1. Use nouns but no verbs"></a>1. Use nouns but no verbs</h3><table><thead><tr><th>Resource</th><th>GET (read)</th><th>POST (create)</th><th>PATCH (update)</th><th>DELETE</th></tr></thead><tbody><tr><td>/cars</td><td>Return a list of cars</td><td>Create a new car</td><td>Bulk update of cars</td><td>Delete all cars</td></tr><tr><td>/cars/1</td><td>Return car id = 1</td><td>Method not allowed (405)</td><td>Update car id = 1</td><td>Delete car id = 1</td></tr></tbody></table><p>Do not use verbs:</p><p><strong>Bad Examples!</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/getAllCars</span><br><span class="line">/createNewCar</span><br><span class="line">/deleteAllCar</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-Use-plural-nouns"><a href="#2-Use-plural-nouns" class="headerlink" title="2. Use plural nouns"></a>2. Use plural nouns</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/carsYES</span><br><span class="line">/car NO!!!!</span><br></pre></td></tr></table></figure><h3 id="3-Use-sub-resources-for-relations"><a href="#3-Use-sub-resources-for-relations" class="headerlink" title="3. Use sub-resources for relations"></a>3. Use sub-resources for relations</h3><ul><li><code>GET /cars/711/drivers/</code>  Returns a list of drivers for car 711.</li><li><code>GET /cars/711/drivers/4</code> Returns driver #4 for car 711.</li></ul><h3 id="4-Provide-filtering-sorting-and-paging-for-collections"><a href="#4-Provide-filtering-sorting-and-paging-for-collections" class="headerlink" title="4. Provide filtering, sorting and paging for collections"></a>4. Provide filtering, sorting and paging for collections</h3><p><strong>Filtering:</strong></p><ul><li><code>GET /cars?color=red</code> Returns a list of red cars.</li><li><code>GET /cars?seats&lt;=2</code> Returns a list of cars with a maximum of 2 seats</li></ul><p><strong>Sorting:</strong></p><p>Allow ascending and descending sorting over multiple fields.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /cars?sort=-manufactorer,+model</span><br></pre></td></tr></table></figure><p> Returns a list of cars sorted by descending manufacturers and ascending models.</p><p><strong>Paging:</strong></p><p><strong>Do not allow user to retrieve all the data in one request by default</strong>. Instead, GET operations, which return a list of requested items, return only the first 25(or another value) items.</p><table><thead><tr><th>URL</th><th>Description</th></tr></thead><tbody><tr><td>/cars</td><td>Return the first 25 cars</td></tr><tr><td>/cars?limit=10</td><td>Return the first 10 cars</td></tr><tr><td>/cars?offset=5</td><td>Return cars from No.6 to No. 31</td></tr><tr><td>/cars?offset=10&amp;limit=5</td><td>Return cars from No.6 to No. 10</td></tr></tbody></table><p>To page through all available items, use the metadata section of the JSON response to get total number of items. For example, <code>&quot;total&quot;: 77</code> means there are 77 cars in the database.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"meta"</span>: &#123;</span><br><span class="line">        <span class="attr">"result_set"</span>: &#123;</span><br><span class="line">            <span class="attr">"count"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"offset"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"limit"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"total"</span>: <span class="number">77</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"uuid1"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="string">"Benz"</span></span><br><span class="line">    &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"uuid2"</span>,</span><br><span class="line">            <span class="attr">"model"</span>: <span class="string">"Lamborghini"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> Send GET request to  <code>/cars?limit=0</code> to get a json that just contains metadata.</p><h3 id="5-Versioning-the-API"><a href="#5-Versioning-the-API" class="headerlink" title="5. Versioning the API"></a>5. Versioning the API</h3><p>Make the API Version mandatory and do not release an unversioned API. Use a simple ordinal number.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/v1</span><br></pre></td></tr></table></figure><h3 id="6-Handle-Errors-with-HTTP-status-codes"><a href="#6-Handle-Errors-with-HTTP-status-codes" class="headerlink" title="6. Handle Errors with HTTP status codes"></a>6. Handle Errors with HTTP status codes</h3><p><strong>Useful status codes</strong></p><ul><li>200 – OK – Eyerything is working</li><li>201 – OK – New resource has been <strong>created</strong></li><li>204 – OK – The resource was successfully <strong>deleted</strong></li><li>304 – <strong>Not Modified</strong> – The client can use cached data</li><li>401 – <strong>Unauthorized</strong> – The request requires an user authentication</li><li>403 – <strong>Forbidden</strong> – The server understood the request, but is refusing it or the access is not allowed.</li><li>404 – <strong>Not found</strong> – There is no resource behind the URI.</li><li>500 – <strong>Internal Server Error</strong> –  You should avoid this error. If an error occurs in the global catch blog, the stracktrace should be logged and not returned as response.</li><li>400 – <strong>Bad Request</strong> – The request was invalid or cannot be served. <strong>The exact error should be explained in the error payload.</strong></li></ul><p><strong>Error payloads</strong></p><p>All exceptions should be mapped in an error payload. Here is an example how a JSON payload should look like.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errors"</span>: [&#123;</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"This is a short human readable msg, MUST not be empty"</span>,</span><br><span class="line">        <span class="attr">"detail"</span>: <span class="string">"This is human readable detail msg, can be empty"</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="number">404</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON-Specifications"><a href="#JSON-Specifications" class="headerlink" title="JSON Specifications"></a>JSON Specifications</h2><p><a href="http://jsonapi.org/format/" target="_blank" rel="noopener">Specifications</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Conventions&quot;&gt;&lt;a href=&quot;#Conventions&quot; class=&quot;headerlink&quot; title=&quot;Conventions&quot;&gt;&lt;/a&gt;Conventions&lt;/h2&gt;&lt;h3 id=&quot;1-Use-nouns-but-no-verbs&quot;&gt;&lt;a href=&quot;#1-Use-nouns-but-no-verbs&quot; class=&quot;headerlink&quot; title=&quot;1. Use nouns but no verbs&quot;&gt;&lt;/a&gt;1. Use nouns but no verbs&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;GET (read)&lt;/th&gt;
&lt;th&gt;POST (create)&lt;/th&gt;
&lt;th&gt;PATCH (update)&lt;/th&gt;
&lt;th&gt;DELETE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;/cars&lt;/td&gt;
&lt;td&gt;Return a list of cars&lt;/td&gt;
&lt;td&gt;Create a new car&lt;/td&gt;
&lt;td&gt;Bulk update of cars&lt;/td&gt;
&lt;td&gt;Delete all cars&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/cars/1&lt;/td&gt;
&lt;td&gt;Return car id = 1&lt;/td&gt;
&lt;td&gt;Method not allowed (405)&lt;/td&gt;
&lt;td&gt;Update car id = 1&lt;/td&gt;
&lt;td&gt;Delete car id = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Do not use verbs:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bad Examples!&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/getAllCars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/createNewCar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/deleteAllCar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://peng-ym.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>在Mac上使用tree命令浏览文件树结构(转)</title>
    <link href="http://peng-ym.github.io/2017/12/17/%E5%9C%A8Mac%E4%B8%8A%E4%BD%BF%E7%94%A8tree%E5%91%BD%E4%BB%A4%E6%B5%8F%E8%A7%88%E6%96%87%E4%BB%B6%E6%A0%91%E7%BB%93%E6%9E%84-%E8%BD%AC/"/>
    <id>http://peng-ym.github.io/2017/12/17/在Mac上使用tree命令浏览文件树结构-转/</id>
    <published>2017-12-17T05:27:57.000Z</published>
    <updated>2017-12-17T10:34:29.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用alias命令"><a href="#使用alias命令" class="headerlink" title="使用alias命令"></a>使用alias命令</h2><ol><li><p>编辑<code>.bashrc</code>或者<code>.zshrc</code>，在文件中添加一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim .zshrc</span><br><span class="line"><span class="built_in">alias</span> tree=<span class="string">"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"</span></span><br></pre></td></tr></table></figure></li><li><p>应用更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure></li><li><p>在文件夹下使用<code>tree</code>命令就可以看到当前文件夹的层级结构了<br><img src="https://ws1.sinaimg.cn/large/c2dfc71dgy1fmjpgcu6dij20i50hqtaq.jpg" alt="效果图"></p></li></ol><h2 id="安装tree包"><a href="#安装tree包" class="headerlink" title="安装tree包"></a>安装tree包</h2><p>如果想要更多功能，可以直接使用unix的<code>tree</code>包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install tree</span><br></pre></td></tr></table></figure></p><p><a href="http://osxdaily.com/2016/09/09/view-folder-tree-terminal-mac-os-tree-equivalent/" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用alias命令&quot;&gt;&lt;a href=&quot;#使用alias命令&quot; class=&quot;headerlink&quot; title=&quot;使用alias命令&quot;&gt;&lt;/a&gt;使用alias命令&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编辑&lt;code&gt;.bashrc&lt;/code&gt;或者&lt;code&gt;.zs
      
    
    </summary>
    
    
      <category term="折腾工具" scheme="http://peng-ym.github.io/tags/%E6%8A%98%E8%85%BE%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>利用Python IMAP、SMTP进行邮件收发</title>
    <link href="http://peng-ym.github.io/2017/12/15/%E5%88%A9%E7%94%A8Python-IMAP%E3%80%81SMTP%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E6%94%B6%E5%8F%91/"/>
    <id>http://peng-ym.github.io/2017/12/15/利用Python-IMAP、SMTP进行邮件收发/</id>
    <published>2017-12-14T16:54:47.000Z</published>
    <updated>2017-12-14T16:54:47.676Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Apache Htpd端口转发配置</title>
    <link href="http://peng-ym.github.io/2017/12/15/Centos%20Apache-Htpd%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E9%85%8D%E7%BD%AE/"/>
    <id>http://peng-ym.github.io/2017/12/15/Centos Apache-Htpd端口转发配置/</id>
    <published>2017-12-14T16:53:26.000Z</published>
    <updated>2017-12-14T17:17:25.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装httpd"><a href="#安装httpd" class="headerlink" title="安装httpd"></a>安装httpd</h2><p>Centos 安装httpd非常简单，<code>yum</code>安装即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum instal httpd</span><br></pre></td></tr></table></figure></p><h2 id="配置转发规则示例"><a href="#配置转发规则示例" class="headerlink" title="配置转发规则示例"></a>配置转发规则示例</h2><p>在部署Java Web应用时，通常会把应用部署在一个Web容器（如Tomcat），再部署一个HTTP服务器转发请求。</p><p>例如部署Tomcat监听8080端口，部署Apache Httpd监听80端口，再转发给tomcat的8080端口。</p><p>可以在一台服务器上部署多个应用和配置多个域名，对于访问者来说感觉像访问两个不同的网站一样。<br>在示例中启动了两个Tomcat实例，分别监听8080和8081端口，部署两个不同的应用。然后将两个域名均指向这台机器的ip，Apache通过访问者使用的域名来执行不同的转发。</p><a id="more"></a><p>httpd的配置文件位于<code>/etc/httpd/conf/httpd.conf</code>，在文件中添加以下配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">NameVirtualHost *:80</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span></span><br><span class="line">    ServerName www.example.com</span><br><span class="line">    ServerAlias example.com *.example.com</span><br><span class="line">    ProxyPass / http://localhost:8080/</span><br><span class="line">    ProxyPassReverse / http://localhost:8080/</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span></span><br><span class="line">    ServerName www.example2.com</span><br><span class="line">    ServerAlias example2.com *.example2.com</span><br><span class="line">    ProxyPass / http://localhost:8081/</span><br><span class="line">    ProxyPassReverse / http://localhost:8081/</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h2><blockquote><p>Centos下apache启动时httpd: apr_sockaddr_info_get() failed报错</p></blockquote><p>解决办法：<a href="https://www.adminsehow.com/2011/03/how-to-fix-starting-httpd-httpd-apr_sockaddr_info_get-failed/" target="_blank" rel="noopener">reference</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> www.example.com &gt; /etc/hostname</span><br><span class="line">/bin/hostname -F /etc/hostname</span><br><span class="line">/etc/init.d/httpd restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装httpd&quot;&gt;&lt;a href=&quot;#安装httpd&quot; class=&quot;headerlink&quot; title=&quot;安装httpd&quot;&gt;&lt;/a&gt;安装httpd&lt;/h2&gt;&lt;p&gt;Centos 安装httpd非常简单，&lt;code&gt;yum&lt;/code&gt;安装即可&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum instal httpd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置转发规则示例&quot;&gt;&lt;a href=&quot;#配置转发规则示例&quot; class=&quot;headerlink&quot; title=&quot;配置转发规则示例&quot;&gt;&lt;/a&gt;配置转发规则示例&lt;/h2&gt;&lt;p&gt;在部署Java Web应用时，通常会把应用部署在一个Web容器（如Tomcat），再部署一个HTTP服务器转发请求。&lt;/p&gt;
&lt;p&gt;例如部署Tomcat监听8080端口，部署Apache Httpd监听80端口，再转发给tomcat的8080端口。&lt;/p&gt;
&lt;p&gt;可以在一台服务器上部署多个应用和配置多个域名，对于访问者来说感觉像访问两个不同的网站一样。&lt;br&gt;在示例中启动了两个Tomcat实例，分别监听8080和8081端口，部署两个不同的应用。然后将两个域名均指向这台机器的ip，Apache通过访问者使用的域名来执行不同的转发。&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="http://peng-ym.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>tmux使用指南</title>
    <link href="http://peng-ym.github.io/2017/12/15/tmux%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://peng-ym.github.io/2017/12/15/tmux使用指南/</id>
    <published>2017-12-14T16:18:56.000Z</published>
    <updated>2018-04-08T13:23:04.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Tmux 简单来说就是终端里的『窗口管理器』，如果我使用终端登录到远程主机并运行前台程序，那么这个窗口等于就被占用了，想要看一下 CPU 的使用率，就得再连接一次。但是如果在远程主机上运行 tmux，那么就可以开启多个控制台（类似于窗口），相当高效。可以通过下面的视频看看大神操作：</p><center><iframe width="600" height="400" src="https://www.youtube.com/embed/JXwS7z6Dqic" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe></center><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用包管理工具安装即可。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tmux</span><br></pre></td></tr></table></figure></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><blockquote><p>帮助信息</p><ul><li><code>tmux list-keys</code> 列出所有可以的快捷键和其运行的 tmux 命令</li><li><code>tmux list-commands</code> 列出所有的 tmux 命令及其参数</li><li><code>tmux info</code> 列出所有的 session, window, pane, 运行的进程号，等。</li></ul></blockquote><p>更常用的是在 tmux 中直接通过默认前缀 <code>ctrl + b</code> （因为<code>ctrl + b</code>不好按，下面我会将它更改为 <code>ctr + a</code>）之后输入对应命令来操作，具体如下（这里只列出输入默认前缀之后需要输入的操作）：</p><blockquote><p>基本操作：</p><ul><li><code>?</code> 列出所有快捷键</li><li><code>:</code> 进入命令模式</li><li><code>ctrl + z</code> 挂起当前session</li></ul><p>窗口操作</p><ul><li><code>c</code> 创建</li><li><code>&amp;</code> 关闭</li><li><code>[0-9]</code> 切换至指定窗口</li><li><code>p</code> 上一窗口</li><li><code>n</code> 下一窗口</li><li><code>w</code> 窗口列表</li></ul></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>系统范围的配置文件是 /etc/tmux.conf，而针对个人的配置文件在 ~/.tmux.conf。</p><p>通过配置文件，可以定义新的快捷键，定义窗口、窗格布局等。</p><p><strong>推荐配置</strong><br><a href="https://github.com/gpakosz/.tmux" target="_blank" rel="noopener">https://github.com/gpakosz/.tmux</a><br>效果图如下：<br><img src="http://ww1.sinaimg.cn/large/c2dfc71dly1fq5kd5qeldg21d60bi1kx.gif" alt="Demo"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Tmux 简单来说就是终端里的『窗口管理器』，如果我使用终端登录到远程主机并运行前台程序，那么这个窗口等于就被占用了，想要看一下 CPU 的使用率，就得再连接一次。但是如果在远程主机上运行 tmux，那么就可以开启多个控制台（类似于窗口），相当高效。可以通过下面的视频看看大神操作：&lt;/p&gt;
&lt;center&gt;&lt;iframe width=&quot;600&quot; height=&quot;400&quot; src=&quot;https://www.youtube.com/embed/JXwS7z6Dqic&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allow=&quot;encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="折腾工具" scheme="http://peng-ym.github.io/tags/%E6%8A%98%E8%85%BE%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
